name: "Network Terraform Apply"

on:
  ## Trigger the workflow manually
  workflow_dispatch:

env:
  TF_WORKSPACE: "default"
  CONFIG_DIRECTORY: "./terraform"
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: "Network Terraform Plan & Apply"
    runs-on: ubuntu-latest
  
    defaults:
      run:
        working-directory: ${{ env.CONFIG_DIRECTORY }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Assume AWS Credentials
        id: assume
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: ${{ github.actor }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Set terraform output vars
        id: vars
        run: |
          printf "cluster_name=%s\n" $(terraform output -raw cluster_name) >> "$GITHUB_OUTPUT"


      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2                         # default
          verbose: false                     # default
          arch: amd64                        # allowed values: amd64, arm64

      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.30.0

      - name: configure kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ steps.vars.outputs.cluster_name }}

      - name: Kubernetes Apply
        run: kubectl apply -k k8s/
